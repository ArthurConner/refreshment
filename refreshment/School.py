# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_StudySystem.ipynb (unless otherwise specified).

__all__ = ['fullPathSplit', 'PathValidaor', 'lessonsFromDirectory', 'subjectFromPath', 'sample', 'testS', 'StudySystem']

# Cell
import os
import sys
import json

# Cell
from os import listdir,  walk
from os.path import isfile, join, getmtime
from collections import deque, Counter
from .Program import Program, Subject, Record, Lesson
import re

# Cell
def fullPathSplit(x):
    ret = deque()
    done = False
    while not done:
        (remain, file) = os.path.split(x)
        ret.appendleft(file)
        done = (x == remain)
        x = remain
    return ret

# Cell
class PathValidaor:

  def isValid(self,path):
    for x in self.skips:
         if x.search(path):
            return False
    return True

  def __init__(self,  skips = [r"^../../refreshment",r"\.DS_Store$",r"meta.json$"]):
    self.skips = [re.compile(x) for x in skips]


# Cell
def lessonsFromDirectory(root,validator = PathValidaor() ):
    onlyfiles = [f for f in listdir(root) if isfile(join(root, f))]
    valid = [f for f in onlyfiles if validator.isValid (f)]
    valid.sort()
    ret = []
    for x in valid:
        l = Lesson(x,x)
        l.modifyTime = getmtime(join(root,x))
        ret.append(l)
    ret.sort(key=Lesson.sBase)
    return ret

# Cell
def subjectFromPath(program,subjectName,struct):
    found = False
    p = None
    for x in struct:
        if x.name == program:
            p = x
            found = True
    if not found:
        p = Program(program)
        struct.append(p)

    found = False
    s = None
    for x in p.subjects:
        if x.name == subjectName:
            s = x
            found = True
    if not found:
        s = Subject(subjectName)
        p.addSubject(s)

    return s

sample = []
testS = subjectFromPath("hogwarts","potions",sample)
testS.toDict()

# Cell
class StudySystem(Record):

    def __init__(self,filename="./data/programs.json", origin="../.." ):
        super().__init__("StudySystem",1,1)
        self.programs = []
        self.schoolDepth = 4
        self.origin = origin
        self.savePath =  filename



    def loadDirectory(self,validator = PathValidaor()):

        schoolDepth = self.schoolDepth
        for root, dirs, files in walk(self.origin):
            if validator.isValid(root):
                fPath = fullPathSplit(root)
                #print(fPath,root)
                if len(fPath) == schoolDepth + 1 and fPath[-2] != "Web":
                    less = lessonsFromDirectory(root,validator)
                    prog = fPath[-2]
                    sub = fPath[-1]
                    s = subjectFromPath(prog,sub,self.programs)
                    for x in less:
                        s.addLesson(x)


    def toDict(self):
        ret = super().toDict()
        ret["programs"] = [x.toDict() for x in self.programs]
        ret["origin"] = self.origin
        ret["savePath"] = self.savePath
        return ret

    def fromDict(d):
        ret = StudySystem("")
        ret.name = d["name"]
        ret.key = d["key"]
        ret.sort = d["sort"]
        ret.programs = [Program.fromDict(x) for x in d["programs"]]
        ret.origin = d["origin"]
        ret.savePath = d["savePath"]
        return ret

    def save(self):
        with open(self.savePath, "w") as dataFile:
            json.dump(self.toDict(), dataFile, indent=4, sort_keys=True)

    def load(p):
        ret = None
        with open(p) as json_file:
            data = json.load(json_file)
            #print(data)
            ret = StudySystem.fromDict(data)

        return ret

