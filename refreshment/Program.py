# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['Record', 'Lesson', 'Subject', 'Program']

# Cell
import json

class Record:

    def __init__(self, name,key = 0,sort = 0):
        self.name = name
        self.key = key
        self.sort = sort

    def adjustEmptyKey(self,others):
        if self.key < 1:
            maxVal = max([x.key for x in others])
            self.key = maxVal + 1
        if self.sort == 0:
            self.sort = max([x.sort for x in others]) + 1

    def adjustKey(self,x):
        props = x.split('|')
        if len(props) > 2:
            self.name = props[0]
            self.key = int(props[1])
            self.sort = int(props[2])

    def keyString(self):
        return self.name + "|" + str(self.key) + "|" + str(self.sort)

    def toDict(self):
        return {"key" : self.keyString() }

    def fromDict(s):
        ret = Record("")
        ret.adjustKey(s["key"])
        return ret

    def __repr__(self):
        return self.keyString()

    def printKeys(x):
        s = sorted(x, key=lambda l: l.sort)
        return [y.keyString() for y in s]

    def appendUnique(x,others):
        if x.key > 0:
            others = [y for y in others if x.key != y.key]
        others.append(x)
        x.adjustEmptyKey(others)
        return others


# Cell
class Lesson(Record):
    def __init__(self, name,  filesName, key = 0,sort = 0):
        super().__init__(name,key,sort)
        self.fileName = filesName
        self.modifyTime = float(0)
        self.requirements = []
        self.nextLesson = []
        self.tags = []

    def sBase(self):
        if self.modifyTime > 0:
            return  self.modifyTime
        return float(self.sort)

    def keyString(self):
        return  super().keyString() + "|" + self.fileName

    def adjustKey(self,x):
        super().adjustKey(x)
        props = x.split('|')
        if len(props) > 3:
            self.fileName = props[3]

    def appendUniqueFile(x,others):
        ret = [y for y in others if x.fileName != y.fileName]
        if len(ret) != len(others):
            return others
        return Record.appendUnique(x,others)

    def toDict(self):
        ret = super().toDict()
        ret["modifyTime"] = self.modifyTime
        ret["requirements"] = self.requirements
        ret["nextLesson"] = self.nextLesson
        ret["tags"] = self.tags
        return ret

    def fromDict(s):
        ret = Lesson("","")
        ret.adjustKey(s["key"])
        ret.modifyTime = s["modifyTime"]
        ret.requirements = s["requirements"]
        ret.nextLesson = s["nextLesson"]
        ret.tags = s["tags"]
        return ret

    def __str__(self):
        return "[" + str(self.key) + "]" + self.fileName


# Cell

class Subject(Record):
    def __init__(self, name,key = 0,sort = 0):
        super().__init__(name,key,sort)
        self.lessons = []

    def addLesson(self,x):
        self.lessons = Lesson.appendUniqueFile(x,self.lessons)

    def toDict(self):
        ret = super().toDict()
        ret["lessons"] = [x.toDict() for x in self.lessons]
        return ret

    def fromDict(d):
        ret = Subject("","")
        ret.adjustKey(d["key"])
        ret.lessons = [ Lesson.fromDict(s) for s in d["lessons"]]
        return ret

    def __repr__(self):

        return self.name + "; [" + ",".join( Record.printKeys(self.lessons)) + "]"

    def __str__(self):
        return '__str__ for Car'

# Cell
class Program(Record):
    def __init__(self, name, path = ".",key = 0,sort = 0 ):
        super().__init__(name,key,sort)
        self.subjects = []

    def toDict(self):
        ret = super().toDict()
        ret["subjects"] = [x.toDict() for x in self.subjects]
        return ret

    def fromDict(d):
        ret = Program("")
        ret.adjustKey(d["key"])
        ret.subjects = [Subject.fromDict(s) for s in d["subjects"]]
        return ret

    def addSubject(self,x):
        self.subjects = Subject.appendUnique(x,self.subjects)

    def __repr__(self):
        return self.name + "Program, Subjects[" + ";".join( Record.printKeys(self.subjects)) +"]"

    def __str__(self):
        return '__str__ for Car'